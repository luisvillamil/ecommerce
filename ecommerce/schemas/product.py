"""Product related schemas"""

# base libraries
from typing import Optional, List
from uuid import UUID, uuid4
import random
import time

# external libraries
from sqlmodel import SQLModel, Field, Relationship

__all__ = (
    "CategoryBase",
    "Category",
    "CategoryCreate",
    "CategoryRead",
    "CategoryReadWithProducts",
    "ProductBase", "Product", 
    "ProductCreate", "ProductRead",
    "ItemBase", "Item", "ItemRead"
)

# Categories
class CategoryBase(SQLModel):
    """Base model for Category"""
    name: str = Field(index=True, unique=True)

class Category(CategoryBase, table = True):
    """Main Table model for Category"""
    id: Optional[int] = Field(default=None, primary_key=True)
    products: List["Product"] = Relationship(back_populates="category")

class CategoryCreate(CategoryBase):
    """Create model for category"""

class CategoryRead(CategoryBase):
    """Read model for category"""
    id: int

# Products
class ProductBase(SQLModel):
    """Base Product model"""
    name: str = Field(index=True)
    description: str
    image_url: Optional[str] = None
    category_id: Optional[int] = Field(default=None, foreign_key="category.id")

class Product(ProductBase, table=True):
    """Main table model for Product"""
    id: Optional[int] = Field(primary_key=True)
    category: Optional[Category] = Relationship(back_populates="products")
    product_items: List["Item"] = Relationship(back_populates="product")
    attributes: List["ProductAttribute"] = Relationship(back_populates="product")

class ProductRead(ProductBase):
    """Product Read model"""

class ProductCreate(ProductBase):
    pass

# Product Attributes
class ProductAttributeBase(SQLModel):
    name: str
    value: str
    val_type: str # to be converted back if needed

class ProductAttribute(ProductAttributeBase, table = True):
    id: int = Field(default=None, primary_key=True)
    product_id: int = Field(foreign_key="product.id")
    product: "Product" = Relationship(back_populates="attributes")

# Items
class ItemBase(SQLModel):
    stock_quantity: int
    sku: str | None = None # will be autogenerated
    image_url: Optional[str] = None
    price: float

    # def generate_sku(self)->str:
    #     """
    #     Generates a unique SKU for a product.
    #     :param product: A short code representing the product category.
    #     :return: A unique SKU string.
    #     """
    #     # Current time in milliseconds (used for uniqueness)
    #     timestamp = int(time.time() * 1000)

    #     # Random number for additional uniqueness
    #     random_number = random.randint(100, 999)

    #     # Combine elements to form SKU
    #     sku = f"{self.category.code}-{timestamp}-{random_number}"
    #     self.sku = sku
    #     return sku

class Item(ItemBase, table=True):
    id: int = Field(primary_key=True)
    product_id: int = Field(foreign_key="product.id")
    product: "Product" = Relationship(back_populates="product_items")

class ItemRead(ItemBase):
    product: "ProductRead"

class CategoryReadWithProducts(CategoryRead):
    """Inherits from CategoryRead, used to display products from category"""
    products: Optional[List[ProductRead]] = None
